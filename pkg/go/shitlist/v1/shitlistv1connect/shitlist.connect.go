// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: shitlist/v1/shitlist.proto

package shitlistv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/mikeder/shitlist/pkg/go/shitlist/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ShitlistServiceName is the fully-qualified name of the ShitlistService service.
	ShitlistServiceName = "shitlist.v1.ShitlistService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ShitlistServiceClickProcedure is the fully-qualified name of the ShitlistService's Click RPC.
	ShitlistServiceClickProcedure = "/shitlist.v1.ShitlistService/Click"
	// ShitlistServiceLeadersProcedure is the fully-qualified name of the ShitlistService's Leaders RPC.
	ShitlistServiceLeadersProcedure = "/shitlist.v1.ShitlistService/Leaders"
)

// ShitlistServiceClient is a client for the shitlist.v1.ShitlistService service.
type ShitlistServiceClient interface {
	// Click records a click action by a user.
	Click(context.Context, *connect_go.Request[v1.ClickRequest]) (*connect_go.Response[v1.ClickResponse], error)
	// Leaders returns the top 10 clickers.
	Leaders(context.Context, *connect_go.Request[v1.LeadersRequest]) (*connect_go.Response[v1.LeadersResponse], error)
}

// NewShitlistServiceClient constructs a client for the shitlist.v1.ShitlistService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShitlistServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ShitlistServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &shitlistServiceClient{
		click: connect_go.NewClient[v1.ClickRequest, v1.ClickResponse](
			httpClient,
			baseURL+ShitlistServiceClickProcedure,
			opts...,
		),
		leaders: connect_go.NewClient[v1.LeadersRequest, v1.LeadersResponse](
			httpClient,
			baseURL+ShitlistServiceLeadersProcedure,
			opts...,
		),
	}
}

// shitlistServiceClient implements ShitlistServiceClient.
type shitlistServiceClient struct {
	click   *connect_go.Client[v1.ClickRequest, v1.ClickResponse]
	leaders *connect_go.Client[v1.LeadersRequest, v1.LeadersResponse]
}

// Click calls shitlist.v1.ShitlistService.Click.
func (c *shitlistServiceClient) Click(ctx context.Context, req *connect_go.Request[v1.ClickRequest]) (*connect_go.Response[v1.ClickResponse], error) {
	return c.click.CallUnary(ctx, req)
}

// Leaders calls shitlist.v1.ShitlistService.Leaders.
func (c *shitlistServiceClient) Leaders(ctx context.Context, req *connect_go.Request[v1.LeadersRequest]) (*connect_go.Response[v1.LeadersResponse], error) {
	return c.leaders.CallUnary(ctx, req)
}

// ShitlistServiceHandler is an implementation of the shitlist.v1.ShitlistService service.
type ShitlistServiceHandler interface {
	// Click records a click action by a user.
	Click(context.Context, *connect_go.Request[v1.ClickRequest]) (*connect_go.Response[v1.ClickResponse], error)
	// Leaders returns the top 10 clickers.
	Leaders(context.Context, *connect_go.Request[v1.LeadersRequest]) (*connect_go.Response[v1.LeadersResponse], error)
}

// NewShitlistServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShitlistServiceHandler(svc ShitlistServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	shitlistServiceClickHandler := connect_go.NewUnaryHandler(
		ShitlistServiceClickProcedure,
		svc.Click,
		opts...,
	)
	shitlistServiceLeadersHandler := connect_go.NewUnaryHandler(
		ShitlistServiceLeadersProcedure,
		svc.Leaders,
		opts...,
	)
	return "/shitlist.v1.ShitlistService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ShitlistServiceClickProcedure:
			shitlistServiceClickHandler.ServeHTTP(w, r)
		case ShitlistServiceLeadersProcedure:
			shitlistServiceLeadersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedShitlistServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShitlistServiceHandler struct{}

func (UnimplementedShitlistServiceHandler) Click(context.Context, *connect_go.Request[v1.ClickRequest]) (*connect_go.Response[v1.ClickResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("shitlist.v1.ShitlistService.Click is not implemented"))
}

func (UnimplementedShitlistServiceHandler) Leaders(context.Context, *connect_go.Request[v1.LeadersRequest]) (*connect_go.Response[v1.LeadersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("shitlist.v1.ShitlistService.Leaders is not implemented"))
}
